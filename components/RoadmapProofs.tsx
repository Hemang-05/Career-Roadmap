//components\RoadmapProofs.tsx
'use client';
import React, { useEffect, useState, useCallback } from 'react';
import ProofInput from './ui/ProofInput';
import { useUser } from '@clerk/nextjs';

interface RoadmapProofsProps {
  clerkId?: string; 
  ownerClerkId?: string;
  ownerUserId?: string;
  yearIndex?: number;
  phaseIndex?: number;
  skillName?: string;
  suggestions?: string[]; // Add suggestions prop
}

export default function RoadmapProofs({
    clerkId,
  ownerClerkId,
  ownerUserId,
  yearIndex,
  phaseIndex,
  skillName,
  suggestions = [], // Default to empty array
}: RoadmapProofsProps) {
  const { user } = useUser();
  const [inputs, setInputs] = useState<string[]>(['']);
  const [proofs, setProofs] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [operationStatus, setOperationStatus] = useState<string | null>(null);
  const [inCheckText, setInCheckText] = useState('In Check..');
  const [isPollingActive, setPollingActive] = useState(false);

  // Format proof type for display
  const formatProofType = (type: string | null) => {
    if (!type) return inCheckText;
    
    // Convert snake_case to readable format
    return type
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  // Get skill name from proof or use fallback
  const getDisplaySkillName = (proof: any) => {
    // Use the skill_name from the proof (generated by LLM) if available
    if (proof.skill_name) {
      return proof.skill_name;
    }
    // Fallback to the prop skillName if proof doesn't have skill_name yet
    return skillName || 'General Programming';
  };

  const fetchProofs = useCallback(async () => {
    if (operationStatus === null && proofs.length === 0) { // Only show loading on initial load if no operation is active
        setLoading(true);
    }
    try {
        const currentClerkId = clerkId || user?.id;
      
        if (!currentClerkId) {
          console.error('No clerk_id available');
          setProofs([]);
          // If polling, stop it here if no clerk ID
          if (isPollingActive) {
            setPollingActive(false);
            setOperationStatus(null); // Clear message if polling stops due to error
          }
          return;
        }
  
        // Build request body following fetch-events pattern
        const requestBody: any = { 
          clerk_id: currentClerkId
        };
        
        if (yearIndex !== undefined) requestBody.yearIndex = yearIndex;
        if (phaseIndex !== undefined) requestBody.phaseIndex = phaseIndex;
        
        const res = await fetch('/api/proofs/list', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        });
      const data = await res.json();
      
      if (data?.success) {
        setProofs(data.proofs || []);

        // Check if polling should stop
        if (isPollingActive) {
          const unverifiedProofs = (data.proofs || []).filter((p: any) => !p.type);
          if (unverifiedProofs.length === 0) {
            setPollingActive(false);
            setOperationStatus(null); // Clear adding message
          }
        }

      } else {
        setProofs([]);
        // If polling, stop it here if fetch fails
        if (isPollingActive) {
          setPollingActive(false);
          setOperationStatus(null); // Clear message if polling stops due to error
        }
      }
    } catch (err) {
      console.error('fetchProofs error', err);
      setProofs([]);
      // If polling, stop it here if fetch fails
      if (isPollingActive) {
        setPollingActive(false);
        setOperationStatus(null); // Clear message if polling stops due to error
      }
    } finally {
      setLoading(false);
    }
  }, [operationStatus, isPollingActive, clerkId, user?.id, yearIndex, phaseIndex]);

  useEffect(() => {
    const statuses = ['In Check..', 'Analyzing', 'Few Moments More', 'Fetching Data...'];
    let i = 0;
    const intervalId = setInterval(() => {
      setInCheckText(statuses[i]);
      i = (i + 1) % statuses.length;
    }, 1000);

    return () => clearInterval(intervalId);
  }, []);

  useEffect(() => {
    fetchProofs();
  }, [fetchProofs]); // Added fetchProofs as dependency

  // Effect for polling after adding a proof
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    if (isPollingActive) {
      interval = setInterval(() => {
        fetchProofs();
      }, 2000);
    } else {
      if (interval) clearInterval(interval);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isPollingActive, fetchProofs]);

  const addInput = () => setInputs(prev => [...prev, '']);
  const updateInput = (idx: number, val: string) => setInputs(prev => prev.map((p, i) => (i === idx ? val : p)));
  const removeInput = (idx: number) => setInputs(prev => prev.filter((_, i) => i !== idx));

  const handleConfirmSingle = async (idx: number) => {
    setMessage(null);
    const url = inputs[idx].trim();
    if (!url) {
      setMessage('Please enter a valid URL.');
      return;
    }
    setOperationStatus('adding'); // Set operation status to adding
    setLoading(true); 
    try {
      const body: any = { url };
      if (ownerClerkId) body.clerk_id = ownerClerkId;
      if (ownerUserId) body.user_id = ownerUserId;
      if (yearIndex !== undefined) body.roadmap_year_index = yearIndex;
      if (phaseIndex !== undefined) body.phase_index = phaseIndex;
      // Don't send skillName here - let the API determine it from phase context

      const res = await fetch('/api/proofs/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      // Handle conflict (already exist)
      if (res.status === 409) {
        updateInput(idx, '');
        await fetchProofs();
        setLoading(false); 
        setOperationStatus(null); // Reset operation status on failure
        return;
      }

      const data = await res.json().catch(() => ({}));
      if (!res.ok || !data?.success) {
        setMessage(`Failed to add: ${url}`);
        setLoading(false); 
        setOperationStatus(null); // Reset operation status on failure
        return;
      }

      // Clear the confirmed input
      updateInput(idx, '');
      
      // Trigger verification (fire-and-forget)
      const proofId = data?.proof?.id;
      if (proofId) {
        fetch('/api/skills-verify', {  // Fixed API endpoint name
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ proof_id: proofId }),
        }).catch((err) => {
          console.error('Failed to trigger skills-verify for', proofId, err);
        });
      }
      
      // Refresh the proof list
      await fetchProofs();
      setPollingActive(true); // Start polling after successful add
    } catch (err) {
      console.error('confirm error', err);
      setMessage(`Error adding: ${url}`);
    } finally {
      setLoading(false);
      // await fetchProofs(); // No longer needed here, polling will handle it
    }
  };

  const handleDelete = async (proofId: string) => {
    if (!confirm('Delete this proof?')) return;
    setOperationStatus('deleting'); // Set operation status to deleting
    setLoading(true); 
    try {
      const body: any = { proof_id: proofId };
      if (ownerClerkId) body.clerk_id = ownerClerkId;
      if (ownerUserId) body.user_id = ownerUserId;

      const res = await fetch('/api/proofs/delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      const data = await res.json();
      if (data?.success) {
        await fetchProofs(); // Fetch proofs once after deleting
        setOperationStatus(null); // Clear message after delete
      } else {
        alert('Delete failed');
      }
    } catch (err) {
      console.error('delete error', err);
      alert('Delete failed (see console)');
    } finally {
      setLoading(false);
      setOperationStatus(null); 
    }
  };

  const handleRefreshProofs = async () => {
    setOperationStatus('refreshing'); // Set operation status to refreshing
    setLoading(true);
    await fetchProofs();
    setOperationStatus(null);
    setLoading(false);
  };

  return (
    <div className="mt-4 p-4 rounded-lg bg-white">
      <div className="flex items-center gap-2 mb-2">
        <h3 className="font-medium text-black">Attach proofs for this phase</h3>
        {suggestions.length > 0 && (
          <div className="relative">
            <div
              onMouseEnter={() => setShowSuggestions(true)}
              onMouseLeave={() => setShowSuggestions(false)}
              className="cursor-pointer flex items-center justify-center w-4 h-4"
            >
              <svg 
                width="12" 
                height="12" 
                viewBox="0 0 24 24" 
                fill="none" 
                xmlns="http://www.w3.org/2000/svg"
                className="text-gray-600 hover:text-gray-800"
              >
                <circle 
                  cx="12" 
                  cy="12" 
                  r="10" 
                  stroke="currentColor" 
                  strokeWidth="2"
                  fill="none"
                />
                <path 
                  d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                  fill="none"
                />
                <path 
                  d="M12 17h.01" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                />
              </svg>
            </div>
            
            {showSuggestions && (
              <div className="absolute top-full left-0 mt-1 w-80 bg-white border border-gray-200 rounded-lg shadow-lg z-10 p-4">
                <h4 className="font-medium text-sm text-gray-900 mb-3">Proof Suggestions</h4>
                <div className="space-y-2">
                  {suggestions.map((suggestion, index) => (
                    <div key={index} className="flex items-start gap-2">
                      <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                      <p className="text-xs text-gray-700 leading-relaxed">{suggestion}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      <div className="space-y-2">
        {inputs.map((val, idx) => (
          <ProofInput
            key={idx}
            value={val}
            onChange={(v) => updateInput(idx, v)}
            onRemove={inputs.length > 1 ? () => removeInput(idx) : undefined}
            onConfirm={() => handleConfirmSingle(idx)}
            isFirst={idx === 0}
          />
        ))}
        <div className="flex gap-2 mt-2">
        <button
            type="button"
            onClick={addInput}
            className="w-4 h-4 border flex items-center justify-center border-gray-300 rounded-full text-xs text-gray-700 hover:bg-gray-200 transition-colors"
            disabled={loading}
            >
            +
        </button>

        </div>
        {message && (
          <pre className="mt-2 whitespace-pre-wrap text-xs text-gray-700 bg-gray-50 p-2 rounded">
            {message}
          </pre>
        )}
      </div>

      <div>
        <div className="flex justify-between items-center mt-2">
          <div className="text-sm font-normal text-gray-600">Existing proofs</div>
          <div className="flex items-center gap-2">
            <button
              onClick={handleRefreshProofs}
              className="p-1.5 text-gray-600"
              title="Refresh proofs"
              disabled={loading}
            >
              <svg 
                width="16" 
                height="16" 
                viewBox="0 0 24 24" 
                fill="none" 
                xmlns="http://www.w3.org/2000/svg"
                className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`}
                style={loading ? { animationDirection: 'reverse' } : {}}
              >
                <path 
                  d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                />
                <path 
                  d="M3 3v5h5" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                />
              </svg>
            </button>
            {operationStatus && (
              <span className="text-xs text-gray-500 ml-2">
                {operationStatus === 'adding' ? 'Adding proof...' : operationStatus === 'deleting' ? 'Deleting proof...' : 'Refreshing...'}
              </span>
            )}
            <div className="text-xs text-gray-500">{proofs.length} proof(s)</div>
          </div>
        </div>
        
        {loading && proofs.length === 0 ? (
          <div className="text-sm text-gray-500">Loading proofs…</div>
        ) : proofs.length === 0 ? (
          <div className="text-sm text-gray-500">No proofs attached for this phase yet.</div>
        ) : (
          <ul className="flex space-x-4 overflow-x-auto py-2 -mx-4 px-4 hide-scrollbar">
            {proofs.map((p) => (
              <li key={p.id} className="flex-none min-w-max p-3 rounded-3xl flex flex-col justify-between proof-glass-card">
                <div className="flex-1">
                  <a href={p.url} target="_blank" rel="noreferrer" className="text-sm text-blue-600 block mb-2">
                  {formatProofType(p.type)}
                  </a>
                </div>
                <div className="flex justify-between items-center mt-2">
                  {p.verification_confidence && (
                    <span className="text-xs text-gray-600">
                      Score: {p.verification_confidence}/100
                    </span>
                  )}
                  <button
                    className="p-1.5 text-gray-600 hover:bg-gray-100 rounded transition-colors"
                    onClick={() => handleDelete(p.id)}
                    title="Delete proof"
                  >
                    <svg 
                      width="16" 
                      height="16" 
                      viewBox="0 0 24 24" 
                      fill="none" 
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-4 h-4"
                    >
                      <path 
                        d="M3 6h18m-2 0v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6m3 0V4c0-1 1-2 2-2h4c0-1 1-2 2-2v2m-6 5v6m4-6v6" 
                        stroke="currentColor" 
                        strokeWidth="2" 
                        strokeLinecap="round" 
                        strokeLinejoin="round"
                      />
                    </svg>
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}